import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/theme/app_theme.dart';
import '../../core/constants/app_constants.dart';
import '../../services/storage_service.dart';
import '../../providers/app_state_provider.dart';
import 'modern_card.dart';
import 'modern_button.dart';

class ServerStatusCard extends ConsumerStatefulWidget {
  const ServerStatusCard({super.key});

  @override
  ConsumerState<ServerStatusCard> createState() => _ServerStatusCardState();
}

class _ServerStatusCardState extends ConsumerState<ServerStatusCard> {
  ServerStatus _status = ServerStatus.unknown;
  String? _errorMessage;
  bool _isChecking = false;

  @override
  void initState() {
    super.initState();
    _checkServerStatus();
  }

  Future<void> _checkServerStatus() async {
    if (_isChecking) return;

    setState(() {
      _isChecking = true;
      _status = ServerStatus.checking;
      _errorMessage = null;
    });

    try {
      final storageService = ref.read(storageServiceProvider);

      if (storageService is IrysServerStorageService) {
        final isOnline = await storageService.checkServerStatus();

        setState(() {
          _status = isOnline ? ServerStatus.online : ServerStatus.offline;
          _isChecking = false;
        });
      } else {
        setState(() {
          _status = ServerStatus.offline;
          _errorMessage = 'ÂΩìÂâç‰∏ç‰ΩøÁî® Irys ÊúçÂä°Âô®Â≠òÂÇ®';
          _isChecking = false;
        });
      }
    } catch (e) {
      setState(() {
        _status = ServerStatus.error;
        _errorMessage = e.toString();
        _isChecking = false;
      });
    }
  }

  Color _getStatusColor() {
    switch (_status) {
      case ServerStatus.online:
        return AppTheme.success;
      case ServerStatus.offline:
        return AppTheme.error;
      case ServerStatus.checking:
        return AppTheme.primaryPurple;
      case ServerStatus.error:
        return AppTheme.error;
      case ServerStatus.unknown:
        return AppTheme.neutral400;
    }
  }

  IconData _getStatusIcon() {
    switch (_status) {
      case ServerStatus.online:
        return Icons.cloud_done;
      case ServerStatus.offline:
        return Icons.cloud_off;
      case ServerStatus.checking:
        return Icons.cloud_sync;
      case ServerStatus.error:
        return Icons.error;
      case ServerStatus.unknown:
        return Icons.help;
    }
  }

  String _getStatusText() {
    switch (_status) {
      case ServerStatus.online:
        return 'Irys ÊúçÂä°Âô®Âú®Á∫ø';
      case ServerStatus.offline:
        return 'Irys ÊúçÂä°Âô®Á¶ªÁ∫ø';
      case ServerStatus.checking:
        return 'Ê£ÄÊü•ÊúçÂä°Âô®Áä∂ÊÄÅ...';
      case ServerStatus.error:
        return 'ÊúçÂä°Âô®ËøûÊé•ÈîôËØØ';
      case ServerStatus.unknown:
        return 'Êú™Áü•Áä∂ÊÄÅ';
    }
  }

  String _getStatusDescription() {
    switch (_status) {
      case ServerStatus.online:
        return 'ÊúçÂä°Âô®ËøêË°åÊ≠£Â∏∏ÔºåÂèØ‰ª•‰∏ä‰º† NFT Êï∞ÊçÆ';
      case ServerStatus.offline:
        return 'Êó†Ê≥ïËøûÊé•Âà∞ÊúçÂä°Âô®ÔºåËØ∑Ê£ÄÊü•ÊúçÂä°Âô®ÊòØÂê¶ËøêË°å';
      case ServerStatus.checking:
        return 'Ê≠£Âú®Ê£ÄÊü•ÊúçÂä°Âô®ËøûÊé•...';
      case ServerStatus.error:
        return _errorMessage ?? 'ËøûÊé•Êó∂ÂèëÁîüÈîôËØØ';
      case ServerStatus.unknown:
        return 'ÁÇπÂáªÊ£ÄÊü•ÊåâÈíÆÊµãËØïÊúçÂä°Âô®ËøûÊé•';
    }
  }

  @override
  Widget build(BuildContext context) {
    return ModernCard.elevated(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Ê†áÈ¢òË°å
          Row(
            children: [
              Icon(Icons.dns_rounded, color: AppTheme.primaryPurple, size: 24),
              const SizedBox(width: 8),
              Expanded(
                child: Text('Irys ÊúçÂä°Âô®Áä∂ÊÄÅ', style: Theme.of(context).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.w600)),
              ),
              if (_isChecking) const SizedBox(width: 20, height: 20, child: CircularProgressIndicator(strokeWidth: 2)),
            ],
          ),

          const SizedBox(height: 16),

          // ÊúçÂä°Âô®Âú∞ÂùÄ
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: AppTheme.neutral100,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: AppTheme.neutral300),
            ),
            child: Row(
              children: [
                Icon(Icons.link, color: AppTheme.neutral600, size: 16),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    AppConstants.irysServerUrl,
                    style: Theme.of(context).textTheme.bodyMedium?.copyWith(fontFamily: 'monospace', color: AppTheme.neutral700),
                  ),
                ),
              ],
            ),
          ),

          const SizedBox(height: 16),

          // Áä∂ÊÄÅÊòæÁ§∫
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: _getStatusColor().withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: _getStatusColor().withOpacity(0.3)),
            ),
            child: Row(
              children: [
                Icon(_getStatusIcon(), color: _getStatusColor(), size: 20),
                const SizedBox(width: 8),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        _getStatusText(),
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(color: _getStatusColor(), fontWeight: FontWeight.w600),
                      ),
                      const SizedBox(height: 4),
                      Text(_getStatusDescription(), style: Theme.of(context).textTheme.bodySmall?.copyWith(color: AppTheme.neutral600)),
                    ],
                  ),
                ),
              ],
            ),
          ),

          const SizedBox(height: 16),

          // ÁéØÂ¢É‰ø°ÊÅØ
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: AppTheme.primaryPurple.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: AppTheme.primaryPurple.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                Icon(Icons.settings, color: AppTheme.primaryPurple, size: 16),
                const SizedBox(width: 8),
                Text(
                  'ÂΩìÂâçÁéØÂ¢É: ${AppConstants.currentEnvironment.name.toUpperCase()}',
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(color: AppTheme.primaryPurple, fontWeight: FontWeight.w500),
                ),
              ],
            ),
          ),

          const SizedBox(height: 16),

          // Êìç‰ΩúÊåâÈíÆ
          Row(
            children: [
              Expanded(
                child: ModernButton.secondary(text: 'ÈáçÊñ∞Ê£ÄÊü•', icon: Icons.refresh, onPressed: _isChecking ? null : _checkServerStatus),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: ModernButton.primary(text: 'ÈÖçÁΩÆËØ¥Êòé', icon: Icons.help_outline, onPressed: () => _showConfigDialog(context)),
              ),
            ],
          ),
        ],
      ),
    );
  }

  void _showConfigDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('üîß Irys ÊúçÂä°Âô®ÈÖçÁΩÆ'),
        content: const SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('ÈÖçÁΩÆÊÇ®ÁöÑ Irys ÊúçÂä°Âô®ÁéØÂ¢ÉÔºö', style: TextStyle(fontWeight: FontWeight.w600)),
              SizedBox(height: 16),

              Text('1. üìù ‰øÆÊîπ lib/core/constants/app_constants.dart'),
              SizedBox(height: 8),
              Text('2. üîß Êõ¥Êîπ currentEnvironment ÂÄºÔºö'),
              SizedBox(height: 8),
              Text('   ‚Ä¢ AppEnvironment.local (localhost:3000)'),
              Text('   ‚Ä¢ AppEnvironment.network (Â±ÄÂüüÁΩë)'),
              Text('   ‚Ä¢ AppEnvironment.production (Áîü‰∫ßÁéØÂ¢É)'),
              SizedBox(height: 16),

              Text('3. üñ•Ô∏è Á°Æ‰øù Irys ÊúçÂä°Âô®Ê≠£Âú®ËøêË°åÔºö'),
              SizedBox(height: 8),
              Text(
                'npm start',
                style: TextStyle(fontFamily: 'monospace', backgroundColor: Color(0xFFF5F5F5)),
              ),
              SizedBox(height: 16),

              Text('4. üîÑ ÈáçÂêØ Flutter Â∫îÁî®‰ΩøÈÖçÁΩÆÁîüÊïà'),
            ],
          ),
        ),
        actions: [TextButton(onPressed: () => Navigator.of(context).pop(), child: const Text('Áü•ÈÅì‰∫Ü'))],
      ),
    );
  }
}
